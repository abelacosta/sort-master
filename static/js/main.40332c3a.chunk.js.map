{"version":3,"sources":["components/navbar.jsx","components/bar.jsx","components/toolpanel.jsx","utils/sortAlgorithms.js","components/graph.jsx","App.js","index.js"],"names":["NavBar","state","webSiteName","className","this","Component","Bar","width","height","props","size","marginLeft","backgroundColor","color","style","getStyles","ToolPanel","id","type","onChange","event","onResize","target","value","min","max","onClick","onSort","disabled","onRandomize","saveHistory","animation","selected","array","push","Graph","bars","maxHeight","minHeight","defaultBarColor","sortSpeed","handleRandomize","tempBars","randomizeArray","setState","handleSort","method","disableControls","onBubbleSort","onSelectionSort","onInsertionSort","onHeapSort","onQuickSort","onMergeSort","handleResize","newBars","increment","Math","floor","i","barHeight","shortid","generate","bgColor","length","j","leftBar","rightBar","tempSize","_","cloneDeep","bubbleSort","animate","smallestIndex","selectionSort","arr","random","temp","setTimeout","selectedBars","enableControls","bubbleButton","document","getElementById","selectionButton","randomizeButton","sizeRange","insertionButton","heapButton","quickButton","mergeButton","name","map","bar","key","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.40332c3a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass NavBar extends Component {\r\n  state = {\r\n    webSiteName: \"Sort Master\",\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <nav className=\"navbar navbar-dark bg-dark p-4\">\r\n        <h1 className=\"navbar-brand\">{this.state.webSiteName}</h1>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NavBar;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Bar extends Component {\r\n  getStyles() {\r\n    let styles = {\r\n      width: 10,\r\n      height: this.props.size,\r\n      marginLeft: 2,\r\n      backgroundColor: this.props.color,\r\n    };\r\n    return styles;\r\n  }\r\n\r\n  render() {\r\n    return <div style={this.getStyles()}></div>;\r\n  }\r\n}\r\n\r\nexport default Bar;\r\n","import React, { Component } from \"react\";\r\n\r\nclass ToolPanel extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"w-25 p-5\">\r\n        <h6>Number of objects:</h6>\r\n        <input\r\n          id=\"size-range\"\r\n          type=\"range\"\r\n          onChange={(event) => {\r\n            this.props.onResize(event.target.value);\r\n          }}\r\n          min=\"4\"\r\n          max=\"100\"\r\n          className=\"w-100\"\r\n        ></input>\r\n        <h6>Sorting methods:</h6>\r\n        <div className=\"row\">\r\n          <button\r\n            id=\"bubble-button\"\r\n            onClick={() => {\r\n              this.props.onSort(\"bubble\");\r\n            }}\r\n            type=\"button\"\r\n            className=\"btn btn-info col m-1\"\r\n          >\r\n            Bubble Sort\r\n          </button>\r\n          <button\r\n            id=\"selection-button\"\r\n            onClick={() => {\r\n              this.props.onSort(\"selection\");\r\n            }}\r\n            type=\"button\"\r\n            className=\"btn btn-info col m-1\"\r\n          >\r\n            Selection Sort\r\n          </button>\r\n        </div>\r\n        <div className=\"row\">\r\n          <button\r\n            id=\"insertion-button\"\r\n            onClick={() => {\r\n              this.props.onSort(\"insertion\");\r\n            }}\r\n            type=\"button\"\r\n            className=\"btn btn-info col m-1\"\r\n            disabled\r\n          >\r\n            Insertion Sort\r\n          </button>\r\n          <button\r\n            id=\"heap-button\"\r\n            onClick={() => {\r\n              this.props.onSort(\"heap\");\r\n            }}\r\n            type=\"button\"\r\n            className=\"btn btn-info col m-1\"\r\n            disabled\r\n          >\r\n            Heap Sort\r\n          </button>\r\n        </div>\r\n        <div className=\"row\">\r\n          <button\r\n            id=\"quick-button\"\r\n            onClick={() => {\r\n              this.props.onSort(\"quick\");\r\n            }}\r\n            type=\"button\"\r\n            className=\"btn btn-info col m-1\"\r\n            disabled\r\n          >\r\n            Quick Sort\r\n          </button>\r\n          <button\r\n            id=\"merge-button\"\r\n            onClick={() => {\r\n              this.props.onSort(\"merge\");\r\n            }}\r\n            type=\"button\"\r\n            className=\"btn btn-info col m-1\"\r\n            disabled\r\n          >\r\n            Merge Sort\r\n          </button>\r\n        </div>\r\n        <button\r\n          id=\"randomize-button\"\r\n          onClick={() => {\r\n            this.props.onRandomize();\r\n          }}\r\n          type=\"button\"\r\n          className=\"btn btn-warning btn-lg w-100 m-1\"\r\n        >\r\n          Randomize\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ToolPanel;\r\n","import _ from \"lodash\";\r\n\r\nfunction saveHistory(animation, selected, array) {\r\n  // Save indeces of selected bars\r\n  animation.push(selected);\r\n  // Save state of array\r\n  animation.push(array);\r\n}\r\n\r\nexport const bubbleSort = (bars) => {\r\n  let animation = [];\r\n  for (let i = 0; i < bars.length - 1; i++) {\r\n    for (let j = 0; j < bars.length - 1 - i; j++) {\r\n      let leftBar = bars[j];\r\n      let rightBar = bars[j + 1];\r\n\r\n      if (leftBar.size > rightBar.size) {\r\n        let tempSize = leftBar.size;\r\n        leftBar.size = rightBar.size;\r\n        rightBar.size = tempSize;\r\n      }\r\n      let selected = [\r\n        [j, \"red\"],\r\n        [j + 1, \"red\"],\r\n      ];\r\n      saveHistory(animation, selected, _.cloneDeep(bars));\r\n    }\r\n  }\r\n  return animation;\r\n};\r\n\r\nexport const selectionSort = (bars) => {\r\n  let animation = [];\r\n  for (let i = 0; i < bars.length; i++) {\r\n    let leftBar = bars[i];\r\n    let smallestIndex = i;\r\n    for (let j = i; j < bars.length; j++) {\r\n      let rightBar = bars[j];\r\n\r\n      if (rightBar.size < bars[smallestIndex].size) {\r\n        smallestIndex = j;\r\n      }\r\n\r\n      let selectedBars = [\r\n        [i, \"lightgreen\"],\r\n        [j, \"red\"],\r\n        [smallestIndex, \"red\"],\r\n      ];\r\n      saveHistory(animation, selectedBars, _.cloneDeep(bars));\r\n    }\r\n    let tempSize = leftBar.size;\r\n    leftBar.size = bars[smallestIndex].size;\r\n    bars[smallestIndex].size = tempSize;\r\n  }\r\n  return animation;\r\n};\r\n\r\nexport const insertionSort = () => {};\r\n\r\nexport const mergeSort = () => {};\r\n\r\nexport const quickSort = () => {};\r\n\r\nexport const heapSort = () => {};\r\n","import React, { Component } from \"react\";\r\nimport shortid from \"shortid\";\r\nimport Bar from \"./bar\";\r\nimport ToolPanel from \"./toolpanel\";\r\nimport {\r\n  bubbleSort,\r\n  selectionSort,\r\n  insertionSort,\r\n  quickSort,\r\n  mergeSort,\r\n  heapSort,\r\n} from \"../utils/sortAlgorithms\";\r\n\r\nclass Graph extends Component {\r\n  state = {\r\n    bars: [],\r\n    maxHeight: 650,\r\n    minHeight: 100,\r\n    defaultBarColor: \"#17a2b8\",\r\n    sortSpeed: 3,\r\n  };\r\n\r\n  constructor() {\r\n    super();\r\n    const newBars = [];\r\n    let increment = Math.floor(\r\n      (this.state.maxHeight - this.state.minHeight) / 52\r\n    );\r\n    for (let i = 0; i < 52; i++) {\r\n      let barHeight = this.state.minHeight + i * increment;\r\n      newBars.push({\r\n        id: shortid.generate(),\r\n        size: barHeight,\r\n        bgColor: this.state.defaultBarColor,\r\n      });\r\n    }\r\n    this.randomizeArray(newBars);\r\n    this.state.bars = newBars;\r\n  }\r\n\r\n  onBubbleSort() {\r\n    let animation = bubbleSort(this.state.bars);\r\n    this.animate(animation);\r\n  }\r\n\r\n  onSelectionSort() {\r\n    let animation = selectionSort(this.state.bars);\r\n    this.animate(animation);\r\n  }\r\n\r\n  onInsertionSort() {\r\n    insertionSort();\r\n  }\r\n\r\n  onHeapSort() {\r\n    heapSort();\r\n  }\r\n\r\n  onQuickSort() {\r\n    quickSort();\r\n  }\r\n\r\n  onMergeSort() {\r\n    mergeSort();\r\n  }\r\n\r\n  randomizeArray(arr) {\r\n    for (let i = arr.length - 1; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * i);\r\n      const temp = arr[i];\r\n      arr[i] = arr[j];\r\n      arr[j] = temp;\r\n    }\r\n  }\r\n\r\n  animate(animation) {\r\n    for (let i = 0; i < animation.length; i += 2) {\r\n      let array = animation[i + 1];\r\n      setTimeout(() => {\r\n        // At last step, we don't have to change colors\r\n        if (i < animation.length - 2) {\r\n          let selectedBars = animation[i];\r\n          for (let j = 0; j < selectedBars.length; j++) {\r\n            array[selectedBars[j][0]].bgColor = selectedBars[j][1];\r\n          }\r\n        }\r\n        this.setState({ bars: array });\r\n      }, i * this.state.sortSpeed);\r\n    }\r\n\r\n    // At this point, sort if finished\r\n    setTimeout(() => {\r\n      this.enableControls();\r\n    }, animation.length * this.state.sortSpeed);\r\n  }\r\n\r\n  enableControls() {\r\n    // Get elements\r\n    let bubbleButton = document.getElementById(\"bubble-button\");\r\n    let selectionButton = document.getElementById(\"selection-button\");\r\n    // Temporarily disabled because algorithms are not\r\n    // yet implemented.\r\n    /*\r\n    let insertionButton = document.getElementById(\"insertion-button\");\r\n    let heapButton = document.getElementById(\"heap-button\");\r\n    let quickButton = document.getElementById(\"quick-button\");\r\n    let mergeButton = document.getElementById(\"merge-button\");\r\n    */\r\n    let randomizeButton = document.getElementById(\"randomize-button\");\r\n    let sizeRange = document.getElementById(\"size-range\");\r\n\r\n    // Disable elements\r\n    bubbleButton.disabled = false;\r\n    selectionButton.disabled = false;\r\n\r\n    // Temporarily disabled because algorithms are not\r\n    // yet implemented.\r\n    /*\r\n    insertionButton.disabled = false;\r\n    heapButton.disabled = false;\r\n    quickButton.disabled = false;\r\n    mergeButton.disabled = false;\r\n    */\r\n    randomizeButton.disabled = false;\r\n    sizeRange.disabled = false;\r\n  }\r\n\r\n  disableControls() {\r\n    // Get elements\r\n    let bubbleButton = document.getElementById(\"bubble-button\");\r\n    let selectionButton = document.getElementById(\"selection-button\");\r\n    let insertionButton = document.getElementById(\"insertion-button\");\r\n    let heapButton = document.getElementById(\"heap-button\");\r\n    let quickButton = document.getElementById(\"quick-button\");\r\n    let mergeButton = document.getElementById(\"merge-button\");\r\n    let randomizeButton = document.getElementById(\"randomize-button\");\r\n    let sizeRange = document.getElementById(\"size-range\");\r\n\r\n    // Disable elements\r\n    bubbleButton.disabled = true;\r\n    selectionButton.disabled = true;\r\n    insertionButton.disabled = true;\r\n    heapButton.disabled = true;\r\n    quickButton.disabled = true;\r\n    mergeButton.disabled = true;\r\n    randomizeButton.disabled = true;\r\n    sizeRange.disabled = true;\r\n  }\r\n\r\n  handleRandomize = () => {\r\n    const tempBars = this.state.bars;\r\n    this.randomizeArray(tempBars);\r\n    this.setState({ bars: tempBars });\r\n  };\r\n\r\n  handleSort = (method) => {\r\n    this.disableControls();\r\n    switch (method) {\r\n      case \"bubble\":\r\n        this.onBubbleSort();\r\n        break;\r\n      case \"selection\":\r\n        this.onSelectionSort();\r\n        break;\r\n      case \"insertion\":\r\n        this.onInsertionSort();\r\n        break;\r\n      case \"heap\":\r\n        this.onHeapSort();\r\n        break;\r\n      case \"quick\":\r\n        this.onQuickSort();\r\n        break;\r\n      case \"merge\":\r\n        this.onMergeSort();\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  handleResize = (size) => {\r\n    const newBars = [];\r\n    let increment = Math.floor(\r\n      (this.state.maxHeight - this.state.minHeight) / size\r\n    );\r\n    for (let i = 0; i < size; i++) {\r\n      let barHeight = this.state.minHeight + i * increment;\r\n      newBars.push({\r\n        id: shortid.generate(),\r\n        size: barHeight,\r\n        bgColor: this.state.defaultBarColor,\r\n      });\r\n    }\r\n    this.randomizeArray(newBars);\r\n    this.setState({ bars: newBars });\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"d-flex justify-content-center\">\r\n        <div name=\"bar-graph\" className=\"d-flex justify-content-center w-75\">\r\n          {this.state.bars.map((bar) => (\r\n            <Bar key={bar.id} size={bar.size} color={bar.bgColor} />\r\n          ))}\r\n        </div>\r\n        <ToolPanel\r\n          onResize={this.handleResize}\r\n          onSort={this.handleSort}\r\n          onRandomize={this.handleRandomize}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Graph;\r\n","import React from \"react\";\r\nimport NavBar from \"./components/navbar\";\r\nimport Graph from \"./components/graph\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <NavBar />\r\n      <Graph />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}